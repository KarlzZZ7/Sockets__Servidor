import socket
import threading  # Se import√≥ threading para el RETO 4: m√∫ltiples clientes

class ServidorChat:
    def __init__(self, ip='127.0.0.1', puerto=8090):
        self.ip = ip
        self.puerto = puerto
        self.servidor = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        # Se configur√≥ la reutilizaci√≥n de direcci√≥n para evitar errores
        self.servidor.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        
        # =========================
        # RETO 1: CAMBIO DE PALABRA CLAVE
        # =========================
        # Se cambi√≥ la palabra clave de "salir" a "bye"
        self.palabra_salida = "bye"
        
        # =========================
        # RETO 3: COLORES EN CONSOLA
        # =========================
        # Se definieron c√≥digos de colores ANSI para la consola
        self.colores = {
            'RESET': '\033[0m',      # Se defini√≥ c√≥digo para resetear color
            'ROJO': '\033[91m',      # Se defini√≥ c√≥digo para color rojo (errores)
            'VERDE': '\033[92m',     # Se defini√≥ c√≥digo para color verde (√©xito)
            'AMARILLO': '\033[93m',  # Se defini√≥ c√≥digo para color amarillo (advertencias)
            'AZUL': '\033[94m',      # Se defini√≥ c√≥digo para color azul (informaci√≥n)
            'MAGENTA': '\033[95m',   # Se defini√≥ c√≥digo para color magenta (decoraci√≥n)
            'CYAN': '\033[96m'       # Se defini√≥ c√≥digo para color cyan (mensajes)
        }
        
        # =========================
        # RETO 4: M√öLTIPLES CLIENTES
        # =========================
        # Se cre√≥ lista para almacenar clientes conectados
        self.clientes_conectados = []
    
    def imprimir_con_color(self, mensaje, color='RESET'):
        """
        RETO 3: COLORES EN CONSOLA
        Se cre√≥ m√©todo para imprimir mensajes con colores
        """
        # Se concaten√≥ el c√≥digo de color con el mensaje y el reset
        print(f"{self.colores[color]}{mensaje}{self.colores['RESET']}")
    
    def manejar_cliente(self, conexion, direccion):
        """
        RETO 4: M√öLTIPLES CLIENTES
        Se cre√≥ m√©todo para manejar cada cliente por separado
        """
        # RETO 3: Se mostr√≥ mensaje de conexi√≥n con color verde
        self.imprimir_con_color(f"Cliente {direccion} se conect√≥ al chat", 'VERDE')
        
        try:
            while True:
                # Se recibieron datos del cliente
                datos = conexion.recv(1024).decode('utf-8')
                
                # Se verific√≥ si el cliente se desconect√≥ inesperadamente
                if not datos:
                    # RETO 3: Se mostr√≥ mensaje de desconexi√≥n con color rojo
                    self.imprimir_con_color(f"Cliente {direccion} se desconect√≥", 'ROJO')
                    break
                
                # =========================
                # RETO 1: CAMBIO DE PALABRA CLAVE
                # =========================
                # Se verific√≥ la nueva palabra clave "bye" en lugar de "salir"
                if datos.lower() == self.palabra_salida:
                    # RETO 3: Se mostr√≥ mensaje de cierre con color rojo
                    self.imprimir_con_color(f"Cliente {direccion} cerr√≥ la conexi√≥n con '{self.palabra_salida}'", 'ROJO')
                    break
                
                # =========================
                # RETO 2: PREFIJOS AUTOM√ÅTICOS
                # =========================
                # Se agreg√≥ prefijo autom√°tico "Cliente dice:"
                # RETO 3: Se mostr√≥ mensaje del cliente con color cyan
                self.imprimir_con_color(f"Cliente {direccion} dice: {datos}", 'CYAN')
                
                # =========================
                # RETO 2: PREFIJOS AUTOM√ÅTICOS
                # =========================
                # Se solicit√≥ respuesta del servidor con prefijo autom√°tico "Servidor dice:"
                # RETO 3: Se mostr√≥ prompt del servidor con color amarillo
                print(f"{self.colores['AMARILLO']}Servidor dice (para {direccion}): {self.colores['RESET']}", end="")
                mensaje = input()
                
                # Se envi√≥ mensaje del servidor al cliente
                conexion.send(mensaje.encode('utf-8'))
                
                # =========================
                # RETO 1: CAMBIO DE PALABRA CLAVE
                # =========================
                # Se verific√≥ si el servidor quiere cerrar con la nueva palabra "bye"
                if mensaje.lower() == self.palabra_salida:
                    # RETO 3: Se mostr√≥ mensaje de cierre con color rojo
                    self.imprimir_con_color(f"Servidor cerr√≥ conexi√≥n con {direccion}", 'ROJO')
                    break
                    
        except Exception as e:
            # RETO 3: Se manej√≥ cualquier error con color rojo
            self.imprimir_con_color(f"Error con cliente {direccion}: {e}", 'ROJO')
        finally:
            # Se cerr√≥ la conexi√≥n del cliente
            conexion.close()
            # RETO 4: Se removi√≥ cliente de la lista de conectados
            if conexion in self.clientes_conectados:
                self.clientes_conectados.remove(conexion)
            # RETO 3: Se mostr√≥ mensaje de terminaci√≥n con color amarillo
            self.imprimir_con_color(f"Conexi√≥n con {direccion} terminada", 'AMARILLO')
    
    def iniciar_chat(self):
        """Se modific√≥ m√©todo para implementar todos los retos"""
        try:
            # Se vincul√≥ el servidor a la direcci√≥n y puerto
            self.servidor.bind((self.ip, self.puerto))
            
            # =========================
            # RETO 4: M√öLTIPLES CLIENTES
            # =========================
            # Se cambi√≥ a 5 conexiones para permitir m√∫ltiples clientes
            self.servidor.listen(5)
            
            # =========================
            # RETO 3: COLORES EN CONSOLA
            # =========================
            # Se mostr√≥ mensaje de inicio con colores
            self.imprimir_con_color("="*50, 'MAGENTA')
            self.imprimir_con_color("üöÄ SERVIDOR DE CHAT MEJORADO INICIADO", 'VERDE')
            self.imprimir_con_color(f"üì° Escuchando en {self.ip}:{self.puerto}", 'AZUL')
            
            # =========================
            # RETO 1: CAMBIO DE PALABRA CLAVE
            # =========================
            # Se mostr√≥ informaci√≥n sobre la nueva palabra clave "bye"
            self.imprimir_con_color(f"üîë Palabra para salir: '{self.palabra_salida}'", 'AMARILLO')
            
            # RETO 3: Se mostr√≥ informaci√≥n con colores
            self.imprimir_con_color("üë• Esperando clientes... (CTRL+C para cerrar servidor)", 'CYAN')
            self.imprimir_con_color("="*50, 'MAGENTA')
            
            # =========================
            # RETO 4: M√öLTIPLES CLIENTES
            # =========================
            # Se implement√≥ bucle para aceptar m√∫ltiples clientes
            while True:
                try:
                    # Se acept√≥ nueva conexi√≥n de cliente
                    conexion, direccion = self.servidor.accept()
                    # Se agreg√≥ cliente a la lista de conectados
                    self.clientes_conectados.append(conexion)
                    
                    # Se cre√≥ hilo separado para manejar cada cliente
                    hilo_cliente = threading.Thread(
                        target=self.manejar_cliente, 
                        args=(conexion, direccion)
                    )
                    # Se configur√≥ el hilo como daemon para que termine con el programa principal
                    hilo_cliente.daemon = True
                    # Se inici√≥ el hilo del cliente
                    hilo_cliente.start()
                    
                except KeyboardInterrupt:
                    # Se captur√≥ interrupci√≥n del usuario (CTRL+C)
                    # RETO 3: Se mostr√≥ mensaje de cierre con color rojo
                    self.imprimir_con_color("\nüõë Cerrando servidor...", 'ROJO')
                    break
                    
        except Exception as e:
            # RETO 3: Se manej√≥ cualquier error del servidor con color rojo
            self.imprimir_con_color(f"‚ùå Error en el servidor: {e}", 'ROJO')
        finally:
            # RETO 4: Se cerraron todas las conexiones de clientes
            for cliente in self.clientes_conectados:
                try:
                    cliente.close()
                except:
                    pass
            # Se cerr√≥ el socket del servidor
            self.servidor.close()
            # RETO 3: Se mostr√≥ mensaje de cierre con color amarillo
            self.imprimir_con_color("üîí Servidor cerrado completamente", 'AMARILLO')

if __name__ == "__main__":
    # Se cre√≥ instancia del servidor con todos los retos implementados
    servidor = ServidorChat()
    # Se inici√≥ el chat
    servidor.iniciar_chat()